import tkinter as tk
from tkinter import messagebox
import random

class NonogramSolver:
    def __init__(self, row_constraints, col_constraints):
        self.row_constraints = row_constraints
        self.col_constraints = col_constraints
        self.board = [[0] * 5 for _ in range(5)]

    def is_valid(self, row, col):
        for i in range(5):
            row_count = sum(self.board[row][j] for j in range(i+1))
            if row_count > sum(self.row_constraints[row][:i+1]):
                return False
            col_count = sum(self.board[j][col] for j in range(i+1))
            if col_count > sum(self.col_constraints[col][:i+1]):
                return False
        return True

    def solve(self, row, col):
        if row == 5:
            return True

        if col == 5:
            return self.solve(row + 1, 0)

        if self.solve(row, col + 1):
            return True

        self.board[row][col] = 1
        if self.is_valid(row, col) and self.solve(row, col + 1):
            return True

        self.board[row][col] = 0
        return False

class NonogramApp:
    def __init__(self, master):
        self.master = master
        master.title("5x5 Nonogram Solver")

        self.cells = []
        for i in range(5):
            row = []
            for j in range(5):
                cell = tk.Button(master, width=2, height=1, bg='white', command=lambda r=i, c=j: self.toggle_cell(r, c))
                cell.grid(row=i+1, column=j+1, padx=2, pady=2)
                row.append(cell)
            self.cells.append(row)

        self.row_labels = []
        for i in range(5):
            label = tk.Label(master, text="")
            label.grid(row=i+1, column=0, padx=2, pady=2)
            self.row_labels.append(label)

        self.col_labels = []
        for j in range(5):
            label = tk.Label(master, text="")
            label.grid(row=0, column=j+1, padx=2, pady=2)
            self.col_labels.append(label)

        self.new_button = tk.Button(master, text="New Puzzle", command=self.new_puzzle)
        self.new_button.grid(row=6, column=0, columnspan=3, padx=2, pady=2)

        self.solve_button = tk.Button(master, text="Solve", command=self.solve_puzzle)
        self.solve_button.grid(row=6, column=3, columnspan=3, padx=2, pady=2)

        self.new_puzzle()

    def toggle_cell(self, row, col):
        if self.cells[row][col].cget('bg') == 'white':
            self.cells[row][col].configure(bg='black')
        else:
            self.cells[row][col].configure(bg='white')

    def new_puzzle(self):
        for i in range(5):
            for j in range(5):
                self.cells[i][j].configure(bg='white')

        row_constraints, col_constraints = self.generate_constraints()

        for i in range(5):
            self.row_labels[i].configure(text=' '.join(map(str, row_constraints[i])))

        for j in range(5):
            self.col_labels[j].configure(text=' '.join(map(str, col_constraints[j])))

    def generate_constraints(self):
        board = [[random.randint(0, 1) for _ in range(5)] for _ in range(5)]
        row_constraints = []
        col_constraints = []

        for i in range(5):
            row = board[i]
            row_constraint = self.count_blocks(row)
            row_constraints.append(row_constraint)

        for j in range(5):
            col = [board[i][j] for i in range(5)]
            col_constraint = self.count_blocks(col)
            col_constraints.append(col_constraint)

        return row_constraints, col_constraints

    def count_blocks(self, row):
        count = []
        current = 0
        for cell in row:
            if cell == 1:
                current += 1
            elif current > 0:
                count.append(current)
                current = 0
        if current > 0:
            count.append(current)
        return count

    def solve_puzzle(self):
        row_constraints = []
        col_constraints = []

        for i in range(5):
            row_text = self.row_labels[i].cget('text')
            row_constraints.append(list(map(int, row_text.split())))

        for j in range(5):
            col_text = self.col_labels[j].cget('text')
            col_constraints.append(list(map(int, col_text.split())))

        solver = NonogramSolver(row_constraints, col_constraints)
        if solver.solve(0, 0):
            for i in range(5):
                for j in range(5):
                    if solver.board[i][j] == 1:
                        self.cells[i][j].configure(bg='black')
                    else:
                        self.cells[i][j].configure(bg='white')
            messagebox.showinfo("Success", "Puzzle solved!")
        else:
            messagebox.showinfo("Error", "No solution found.")

root = tk.Tk()
app = NonogramApp(root)
root.mainloop()